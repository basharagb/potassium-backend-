import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Alert,
  CircularProgress,
  TextField,
  MenuItem,
  Tabs,
  Tab,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  Storage,
  Wifi,
  WifiOff,
  Refresh,
  Radar as RadarIcon,
  Receipt,
  Download,
  CheckCircle,
  Error,
  Warning,
} from '@mui/icons-material';
import apiService from '../services/api';
import udpReadingsApi, { UdpReading, UdpSystemStatus, UdpStatistics } from '../services/udpReadingsApi';
import { Radar, Fine } from '../types';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div role="tabpanel" hidden={value !== index} {...other}>
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

interface RadarReading {
  id: number;
  radarId: number;
  speed: number;
  speedLimit: number;
  timestamp: string;
  isViolation: boolean;
  correlatedImages?: any[];
  fineAmount?: number;
  plateNumber?: string;
  location?: string;
  fineId?: number;
  sourceIP?: string;
  radar?: {
    name: string;
    location: string;
  };
  fine?: {
    id: number;
    fineAmount: number;
    status: string;
  };
}

const RadarInfoMonitor: React.FC = () => {
  const [radars, setRadars] = useState<Radar[]>([]);
  const [fines, setFines] = useState<Fine[]>([]);
  const [radarReadings, setRadarReadings] = useState<RadarReading[]>([]);
  const [udpStats, setUdpStats] = useState<UdpStatistics | null>(null);
  const [udpStatus, setUdpStatus] = useState<UdpSystemStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const setupRealTimeMonitoring = async () => {
    const loadUdpData = async () => {
      try {
        setLoading(true);
        setError(null);

        // Load UDP readings
        const readings = await udpReadingsApi.getLiveReadings(50);
        setUdpReadings(readings);

        // Load UDP statistics
        const stats = await udpReadingsApi.getStatistics();
        setUdpStats(stats);

        // Load UDP system status
        const status = await udpReadingsApi.getSystemStatus();
        setUdpStatus(status);
        setIsConnected(status.listening);

        // Load radars and fines from API
        try {
          const radarsResponse = await apiService.getRadars();
          setRadars(radarsResponse.data || []);
          
          const finesResponse = await apiService.getFines();
          setFines(finesResponse.data || []);
        } catch (apiError) {
          console.warn('API data loading failed, using UDP data only:', apiError);
        }

        setLastUpdate(new Date().toISOString());
        console.log('✅ UDP system connected - Status:', status.listening ? 'Online' : 'Offline');
      } catch (error) {
        console.error('❌ Error loading UDP data:', error);
        setError('Failed to connect to UDP system');
        setIsConnected(false);
      } finally {
        setLoading(false);
      }
    };

    const setupPolling = async () => {
      await loadUdpData();

      // Start status polling for UDP system
      const stopStatusPolling = udpReadingsApi.startStatusPolling((status) => {
        setUdpStatus(status);
        setIsConnected(status.listening);
        if (!status.listening) {
          setError('UDP listener is not active');
        } else if (error?.includes('UDP listener')) {
          setError(null);
        }
      });

      // Set up periodic refresh
      const refreshInterval = setInterval(() => {
        loadUdpData();
      }, 10000);

      // Return cleanup function
      return () => {
        clearInterval(refreshInterval);
      };
    };

    return setupPolling();
  };

  const handleRefresh = async () => {
    setLoading(true);
    try {
      await loadUdpData();
      realTimeDataService.requestRadarData();
      realTimeDataService.requestFineData();
    } catch (error) {
      console.error('Error refreshing data:', error);
      setError('Failed to refresh data');
    } finally {
      setLoading(false);
    }
  };

  const handleExportCsv = () => {
    try {
      udpReadingsApi.exportCsv({
        isViolation: udpReadingFilter === 'violations' ? true : 
                    udpReadingFilter === 'compliant' ? false : undefined
      });
    } catch (error) {
      console.error('Error exporting CSV:', error);
      setError('Failed to export CSV');
    }
  };

  const handleProcessReading = async (id: number) => {
    try {
      await udpReadingsApi.processReading(id, 'Processed via dashboard');
      await loadUdpData(); // Refresh data
    } catch (error) {
      console.error('Error processing reading:', error);
      setError('Failed to process reading');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'inactive': return 'error';
      case 'maintenance': return 'warning';
      case 'pending': return 'warning';
      case 'processed': return 'info';
      case 'paid': return 'success';
      case 'cancelled': return 'error';
      default: return 'default';
    }
  };

  const filteredRadars = radars.filter(radar => 
    radarFilter === 'all' || radar.status === radarFilter
  );

  const filteredFines = fines.filter(fine => 
    fineFilter === 'all' || fine.status === fineFilter
  );

  const filteredReadings = radarReadings.filter(reading => 
    readingFilter === 'all' || 
    (readingFilter === 'violations' && reading.isViolation) ||
    (readingFilter === 'compliant' && !reading.isViolation)
  );

  const filteredUdpReadings = udpReadings.filter(reading => 
    udpReadingFilter === 'all' || 
    (udpReadingFilter === 'violations' && reading.isViolation) ||
    (udpReadingFilter === 'compliant' && !reading.isViolation) ||
    (udpReadingFilter === 'processed' && reading.processed) ||
    (udpReadingFilter === 'unprocessed' && !reading.processed)
  );

  if (loading && radars.length === 0 && fines.length === 0) {
    // Show loading for maximum 3 seconds, then show empty state
    setTimeout(() => {
      if (radars.length === 0 && fines.length === 0) {
        setLoading(false);
        setError('UDP service not available. No radar data to display.');
      }
    }, 3000);
    
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
        <Typography variant="h6" sx={{ ml: 2 }}>Loading UDP data...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <Storage sx={{ fontSize: '2rem', color: isConnected ? 'success.main' : 'error.main' }} />
          <Box>
            <Typography variant="h4" component="h1">
              Radar Info Monitor
            </Typography>
            <Typography variant="subtitle1" color="textSecondary">
              Server: 192.186.1.14:17081
            </Typography>
          </Box>
          <Chip 
            icon={isConnected ? <Wifi /> : <WifiOff />}
            label={isConnected ? 'Connected' : 'Disconnected'} 
            color={isConnected ? 'success' : 'error'} 
          />
        </Box>
        <Button
          onClick={handleRefresh}
          startIcon={<Refresh />}
          disabled={loading}
          variant="contained"
        >
          Refresh
        </Button>
      </Box>

      {/* Error Alert */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Statistics Cards */}
      <Box display="flex" flexWrap="wrap" gap={2} sx={{ mb: 3 }}>
        <Card sx={{ flex: '1 1 calc(20% - 12px)', minWidth: 180 }}>
          <CardContent>
            <Typography color="textSecondary" gutterBottom variant="body2">UDP Readings</Typography>
            <Typography variant="h4">{udpStats?.totalReadings || udpReadings.length}</Typography>
            <Typography variant="body2" color="error.main">
              {udpStats?.violationReadings || udpReadings.filter(r => r.isViolation).length} Violations
            </Typography>
          </CardContent>
        </Card>
        <Card sx={{ flex: '1 1 calc(20% - 12px)', minWidth: 180 }}>
          <CardContent>
            <Typography color="textSecondary" gutterBottom variant="body2">Compliance Rate</Typography>
            <Typography variant="h4">{udpStats?.complianceRate || '0'}%</Typography>
            <Typography variant="body2" color="info.main">
              {udpStats?.processedReadings || 0} Processed
            </Typography>
          </CardContent>
        </Card>
        <Card sx={{ flex: '1 1 calc(20% - 12px)', minWidth: 180 }}>
          <CardContent>
            <Typography color="textSecondary" gutterBottom variant="body2">Average Speed</Typography>
            <Typography variant="h4">{udpStats?.averageSpeed || '0'}</Typography>
            <Typography variant="body2" color="textSecondary">
              km/h
            </Typography>
          </CardContent>
        </Card>
        <Card sx={{ flex: '1 1 calc(20% - 12px)', minWidth: 180 }}>
          <CardContent>
            <Typography color="textSecondary" gutterBottom variant="body2">System Status</Typography>
            <Typography variant="h6" color={isConnected ? 'success.main' : 'error.main'}>
              {isConnected ? 'Online' : 'Offline'}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              {udpStatus?.stats.uptime ? `${Math.floor(udpStatus.stats.uptime / 60000)}m uptime` : 'No data'}
            </Typography>
          </CardContent>
        </Card>
        <Card sx={{ flex: '1 1 calc(20% - 12px)', minWidth: 180 }}>
          <CardContent>
            <Typography color="textSecondary" gutterBottom variant="body2">Messages Today</Typography>
            <Typography variant="h4">{udpStatus?.stats.messagesReceived || 0}</Typography>
            <Typography variant="body2" color="success.main">
              {udpStatus?.stats.finesCreated || 0} Fines Created
            </Typography>
          </CardContent>
        </Card>
      </Box>

      {/* Data Tabs */}
      <Card>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
            <Tab 
              label={`UDP Readings (${udpReadings.length})`} 
              icon={<Storage />} 
              iconPosition="start"
            />
            <Tab 
              label={`Radars (${radars.length})`} 
              icon={<RadarIcon />} 
              iconPosition="start"
            />
            <Tab 
              label={`Fines (${fines.length})`} 
              icon={<Receipt />} 
              iconPosition="start"
            />
            <Tab 
              label={`Legacy Readings (${radarReadings.length})`} 
              icon={<RadarIcon />} 
              iconPosition="start"
            />
          </Tabs>
        </Box>

        {/* UDP Readings Tab */}
        <TabPanel value={tabValue} index={0}>
          <Box sx={{ mb: 2, display: 'flex', gap: 2, alignItems: 'center' }}>
            <TextField
              select
              label="Filter by Type"
              value={udpReadingFilter}
              onChange={(e) => setUdpReadingFilter(e.target.value)}
              sx={{ minWidth: 200 }}
              size="small"
            >
              <MenuItem value="all">All Readings</MenuItem>
              <MenuItem value="violations">Violations Only</MenuItem>
              <MenuItem value="compliant">Compliant Only</MenuItem>
              <MenuItem value="processed">Processed</MenuItem>
              <MenuItem value="unprocessed">Unprocessed</MenuItem>
            </TextField>
            <Button
              onClick={handleExportCsv}
              startIcon={<Download />}
              variant="outlined"
              size="small"
            >
              Export CSV
            </Button>
          </Box>
          
          <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>Radar</TableCell>
                  <TableCell>Speed</TableCell>
                  <TableCell>Format</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Detection Time</TableCell>
                  <TableCell>Source</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredUdpReadings.map((reading) => (
                  <TableRow key={reading.id} hover>
                    <TableCell>{reading.id}</TableCell>
                    <TableCell>
                      <Box>
                        <Typography variant="body2" fontWeight="bold">
                          {reading.radar?.name || `Radar ${reading.radarId}`}
                        </Typography>
                        <Typography variant="caption" color="textSecondary">
                          {reading.radar?.location || 'Unknown Location'}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography 
                        variant="body2" 
                        fontWeight="bold"
                        sx={{ 
                          color: reading.isViolation 
                            ? udpReadingsApi.getViolationColor(reading.speedDetected, reading.speedLimit)
                            : 'success.main'
                        }}
                      >
                        {reading.speedDetected} km/h
                      </Typography>
                      <Typography variant="caption" color="textSecondary">
                        Limit: {reading.speedLimit} km/h
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Chip 
                        label={reading.messageFormat.toUpperCase()} 
                        size="small"
                        color={reading.messageFormat === 'binary' ? 'primary' : 
                               reading.messageFormat === 'json' ? 'secondary' : 'default'}
                      />
                    </TableCell>
                    <TableCell>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
                        {reading.isViolation && (
                          <Chip 
                            label="VIOLATION" 
                            color="error" 
                            size="small"
                            icon={<Warning />}
                          />
                        )}
                        {reading.fineCreated && (
                          <Chip 
                            label={`Fine #${reading.fineId}`} 
                            color="warning" 
                            size="small"
                            icon={<Receipt />}
                          />
                        )}
                        {reading.processed && (
                          <Chip 
                            label="PROCESSED" 
                            color="success" 
                            size="small"
                            icon={<CheckCircle />}
                          />
                        )}
                      </Box>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {new Date(reading.detectionTime).toLocaleString()}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" color="textSecondary">
                        {reading.sourceIP}:{reading.sourcePort}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {!reading.processed && (
                        <Tooltip title="Mark as processed">
                          <IconButton 
                            size="small" 
                            onClick={() => handleProcessReading(reading.id)}
                            color="primary"
                          >
                            <CheckCircle />
                          </IconButton>
                        </Tooltip>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        {/* Radars Tab */}
        <TabPanel value={tabValue} index={1}>
          <Box sx={{ mb: 2 }}>
            <TextField
              select
              label="Filter by Status"
              value={radarFilter}
              onChange={(e) => setRadarFilter(e.target.value)}
              sx={{ minWidth: 200 }}
              size="small"
            >
              <MenuItem value="all">All Status</MenuItem>
              <MenuItem value="active">Active</MenuItem>
              <MenuItem value="inactive">Inactive</MenuItem>
              <MenuItem value="maintenance">Maintenance</MenuItem>
            </TextField>
          </Box>
          
          <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>Name</TableCell>
                  <TableCell>Location</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Speed Limit</TableCell>
                  <TableCell>IP Address</TableCell>
                  <TableCell>Serial Number</TableCell>
                  <TableCell>Statistics</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredRadars.map((radar) => (
                  <TableRow key={radar.id} hover>
                    <TableCell>{radar.id}</TableCell>
                    <TableCell>{radar.name}</TableCell>
                    <TableCell>{radar.location}</TableCell>
                    <TableCell>
                      <Chip 
                        label={radar.status} 
                        color={getStatusColor(radar.status) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>{radar.speedLimit} km/h</TableCell>
                    <TableCell>{radar.ipAddress || 'N/A'}</TableCell>
                    <TableCell>{radar.serialNumber || 'N/A'}</TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        Total: {radar.statistics?.totalFines || 0}
                      </Typography>
                      <Typography variant="body2">
                        Pending: {radar.statistics?.pendingFines || 0}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        {/* Fines Tab */}
        <TabPanel value={tabValue} index={2}>
          <Box sx={{ mb: 2 }}>
            <TextField
              select
              label="Filter by Status"
              value={fineFilter}
              onChange={(e) => setFineFilter(e.target.value)}
              sx={{ minWidth: 200 }}
              size="small"
            >
              <MenuItem value="all">All Status</MenuItem>
              <MenuItem value="pending">Pending</MenuItem>
              <MenuItem value="processed">Processed</MenuItem>
              <MenuItem value="paid">Paid</MenuItem>
              <MenuItem value="cancelled">Cancelled</MenuItem>
            </TextField>
          </Box>
          
          <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>Radar ID</TableCell>
                  <TableCell>Plate Number</TableCell>
                  <TableCell>Vehicle Speed</TableCell>
                  <TableCell>Speed Limit</TableCell>
                  <TableCell>Fine Amount</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Violation Time</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredFines.map((fine) => (
                  <TableRow key={fine.id} hover>
                    <TableCell>{fine.id}</TableCell>
                    <TableCell>{fine.radarId}</TableCell>
                    <TableCell>
                      <Typography variant="body2" fontWeight="bold">
                        {fine.plateNumber}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      <Typography 
                        variant="body2" 
                        color={fine.vehicleSpeed > fine.speedLimit ? 'error.main' : 'text.primary'}
                      >
                        {fine.vehicleSpeed} km/h
                      </Typography>
                    </TableCell>
                    <TableCell>{fine.speedLimit} km/h</TableCell>
                    <TableCell>${fine.fineAmount}</TableCell>
                    <TableCell>
                      <Chip 
                        label={fine.status} 
                        color={getStatusColor(fine.status) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {new Date(fine.violationTime).toLocaleString()}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>

        {/* Legacy Radar Readings Tab */}
        <TabPanel value={tabValue} index={3}>
          <Box sx={{ mb: 2 }}>
            <TextField
              select
              label="Filter by Type"
              value={readingFilter}
              onChange={(e) => setReadingFilter(e.target.value)}
              sx={{ minWidth: 200 }}
              size="small"
            >
              <MenuItem value="all">All Readings</MenuItem>
              <MenuItem value="violations">Violations Only</MenuItem>
              <MenuItem value="compliant">Compliant Only</MenuItem>
            </TextField>
          </Box>
          
          <TableContainer component={Paper} sx={{ maxHeight: 600 }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  <TableCell>Reading ID</TableCell>
                  <TableCell>Radar ID</TableCell>
                  <TableCell>Speed Detected</TableCell>
                  <TableCell>Speed Limit</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Detection Time</TableCell>
                  <TableCell>Fine ID</TableCell>
                  <TableCell>Images</TableCell>
                  <TableCell>Source IP</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredReadings.map((reading) => (
                  <TableRow key={reading.id} hover>
                    <TableCell>{reading.id}</TableCell>
                    <TableCell>{reading.radarId}</TableCell>
                    <TableCell>
                      <Typography 
                        variant="body2" 
                        color={reading.isViolation ? 'error.main' : 'success.main'}
                        fontWeight="bold"
                      >
                        {reading.speed} km/h
                      </Typography>
                    </TableCell>
                    <TableCell>{reading.speedLimit} km/h</TableCell>
                    <TableCell>
                      <Chip 
                        label={reading.isViolation ? 'VIOLATION' : 'COMPLIANT'} 
                        color={reading.isViolation ? 'error' : 'success'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2">
                        {new Date(reading.timestamp).toLocaleString()}
                      </Typography>
                    </TableCell>
                    <TableCell>
                      {reading.fineId ? (
                        <Chip 
                          label={`Fine #${reading.fineId}`} 
                          color="warning"
                          size="small"
                        />
                      ) : (
                        <Typography variant="body2" color="textSecondary">
                          No Fine
                        </Typography>
                      )}
                    </TableCell>
                    <TableCell>
                      {reading.correlatedImages && reading.correlatedImages.length > 0 ? (
                        <Chip 
                          label={`${reading.correlatedImages.length} Images`} 
                          color="info"
                          size="small"
                        />
                      ) : (
                        <Typography variant="body2" color="textSecondary">
                          No Images
                        </Typography>
                      )}
                    </TableCell>
                    <TableCell>
                      <Typography variant="body2" color="textSecondary">
                        {reading.sourceIP || 'N/A'}
                      </Typography>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </TabPanel>
      </Card>
    </Box>
  );
};

export default RadarInfoMonitor;
